# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12EJd3lK3IIqpbc6YFA5KocUdEhMKi2fB
"""

from google.colab import drive
from scipy import ndimage
drive.mount('/gdrive')

# Commented out IPython magic to ensure Python compatibility.
# %cd /gdrive/My\ Drive/MCA\ Ass\ 1/

def extractFeatures(img):
    log_images = []
    for scale in range(0,11):
        y = np.power(scaling_factor,scale)
        sigma_1 = sigma*y
        filter_log = ndimage.gaussian_laplace(img,sigma_1)
        image = cv2.filter2D(img,-1,filter_log)
        image = np.square(image)
        log_images.append(image)
    image_feature = np.array([i for i in log_images])
    return image_feature

import cv2
from google.colab.patches import cv2_imshow
from pylab import *
import numpy as np
import matplotlib.pyplot as plt
from scipy import ndimage
from scipy.ndimage import filters
from scipy import spatial
import os
import pickle as pkl
scaling_factor = 1.5
sigma = 1.0
directory = 'HW-1/images/'
blobs = {}
count = 0
a = datetime.datetime.now()
#for filename in os.listdir(directory):
#  b = datetime.datetime.now()
#  img = cv2.imread(directory+filename,0)
#  #img = cv2.imread(directory+'ashmolean_000028.jpg',0)
#  (h,w) = img.shape
#  img = img/255.0
#  count+=1
#  image_feature = extractFeatures(img)
#  blob_points = []
#  for i in range(1,h,15):
#      for j in range(1,w,15):
#          comparison_window = image_feature[:,i-1:i+2,j-1:j+2]
#          result = np.amax(comparison_window)
#          if result >= 0.035:
#              z,x,y = np.unravel_index(comparison_window.argmax(),comparison_window.shape)
#              blob_points.append((i+x-1,j+y-1,scaling_factor**z*sigma)) 

#  blob_points = np.array(blob_points)
#  c = datetime.datetime.now()
#  delta2 = c-b
#  delta1 = c-a
#  blobs[filename] = blob_points
#  print('Current image no: '+str(count)+"\t time for image "+str(count)+" : "+str(delta2)+"\t Total time elapsed : "+str(delta1)+"\t size : "+str(len(blobs)))
#  if(count%500==0):
#    print('saving features ' +str(count-500)+'-'+str(count)+' Blobs')
#    pkl.dump(blobs,open('features ' +str(count-500)+'-'+str(count)+' Blobs-SIFT','wb'))
#    blobs = {}


feature = pkl.load(open('features 0-500 Blobs-SIFT','rb'))
blob_points = feature['oxford_001439.jpg']
fig, ax = plt.subplots()
nh, nw = img.shape
count = 0

ax.imshow(img, interpolation='nearest', cmap="gray")
for blob in blob_points:
    y, x, r = blob
    c = plt.Circle((x, y), r * 1.414, color='red', linewidth=1.5, fill=False)
    ax.add_patch(c)
ax.plot()
plt.show()